




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "C2S_proxy.h"

namespace C2S {


        
	bool Proxy::Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & str, const int & num)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Chat;
__msg.Write(__msgid); 
	
__msg << str;
__msg << num;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Chat, (::Proud::RmiID)Rmi_Chat);
	}

	bool Proxy::Chat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & str, const int & num)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Chat;
__msg.Write(__msgid); 
	
__msg << str;
__msg << num;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Chat, (::Proud::RmiID)Rmi_Chat);
	}
        
	bool Proxy::Send ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & str, const int & num, const Proud::String & sendTime)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Send;
__msg.Write(__msgid); 
	
__msg << str;
__msg << num;
__msg << sendTime;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Send, (::Proud::RmiID)Rmi_Send);
	}

	bool Proxy::Send ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & str, const int & num, const Proud::String & sendTime)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Send;
__msg.Write(__msgid); 
	
__msg << str;
__msg << num;
__msg << sendTime;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Send, (::Proud::RmiID)Rmi_Send);
	}
        
	bool Proxy::Quit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & dlg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Quit;
__msg.Write(__msgid); 
	
__msg << dlg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Quit, (::Proud::RmiID)Rmi_Quit);
	}

	bool Proxy::Quit ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & dlg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Quit;
__msg.Write(__msgid); 
	
__msg << dlg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Quit, (::Proud::RmiID)Rmi_Quit);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Chat =_PNT("Chat");
#else
const PNTCHAR* Proxy::RmiName_Chat =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Send =_PNT("Send");
#else
const PNTCHAR* Proxy::RmiName_Send =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Quit =_PNT("Quit");
#else
const PNTCHAR* Proxy::RmiName_Quit =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_Chat;

}



